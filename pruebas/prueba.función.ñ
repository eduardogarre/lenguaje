/*
SPDX-License-Identifier: MPL-2.0-no-copyleft-exception

This Source Code Form is subject to the terms of the Mozilla Public License, v.
2.0. If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

This Source Code Form is "Incompatible With Secondary Licenses", as defined by
the Mozilla Public License, v. 2.0.

Copyright © 2021 Eduardo Garre Muñoz
*/

// Biblioteca estándar
// Aleatorio
externo ent aleatorio();
externo ent saleatorio(ent semilla);
// ES
externo ent escribe(nat8* _texto);
externo ent escribeln(nat8* _texto);
// Proceso
externo ent idprocesoactual();

nat factorial(nat x)
{
    si (x == 1)
    {
        devuelve 1;
    }
    sino
    {
        devuelve x * factorial(x - 1);
    }

    devuelve 1;
}

nat8 devuelve_nat8(nat8 x)
{
    devuelve x;
}

nat16 devuelve_nat16(nat16 x)
{
    devuelve x;
}

nat32 devuelve_nat32(nat32 x)
{
    devuelve x;
}

nat64 devuelve_nat64(nat64 x)
{
    devuelve x;
}

ent8 devuelve_ent8(ent8 x)
{
    devuelve x;
}

ent16 devuelve_ent16(ent16 x)
{
    devuelve x;
}

ent32 devuelve_ent32(ent32 x)
{
    devuelve x;
}

ent64 devuelve_ent64(ent64 x)
{
    devuelve x;
}

real32 devuelve_real32(real32 x)
{
    devuelve x;
}

real64 devuelve_real64(real64 x)
{
    devuelve x;
}

público nada prueba_función()
{
    nat8[] correcto = ".";
    nat8[] error = "\nERROR función\n";

    ////// NAT8 //////
    nat8 nat8x = 42;
    nat8 nat8y = devuelve_nat8(nat8x);
    si (nat8x == nat8y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// NAT16 //////
    nat16 nat16x = 42;
    nat16 nat16y = devuelve_nat16(nat16x);
    si (nat16x == nat16y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// NAT32 //////
    nat32 nat32x = 42;
    nat32 nat32y = devuelve_nat32(nat32x);
    si (nat32x == nat32y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// NAT64 //////
    nat64 nat64x = 42;
    nat64 nat64y = devuelve_nat64(nat64x);
    si (nat64x == nat64y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }
/*
    ////// ENT8 //////
    ent8 ent8x = 42;
    ent8 ent8y = devuelve_ent8(ent8x);
    si (ent8x == ent8y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }
*/
    ////// ENT16 //////
    ent16 ent16x = 42;
    ent16 ent16y = devuelve_ent16(ent16x);
    si (ent16x == ent16y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// ENT32 //////
    ent32 ent32x = 42;
    ent32 ent32y = devuelve_ent32(ent32x);
    si (ent32x == ent32y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// ENT64 //////
    ent64 ent64x = 42;
    ent64 ent64y = devuelve_ent64(ent64x);
    si (ent64x == ent64y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// REAL32 //////
    real32 real32x = 1;
    real32 real32y = devuelve_real32(real32x);
    si (real32x == real32y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// REAL64 //////
    real64 real64x = 1;
    real64 real64y = devuelve_real64(real64x);
    si (real64x == real64y)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    ////// RECURSIÓN //////
    nat nat_factorial = 0;

    nat_factorial = factorial(1);
    si (nat_factorial == 1)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    nat_factorial = factorial(2);
    si (nat_factorial == 2)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    nat_factorial = factorial(3);
    si (nat_factorial == 6)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    nat_factorial = factorial(4);
    si (nat_factorial == 24)
    {
        escribe(correcto);
    }
    sino
    {
        escribe(error);
    }

    vuelve;
}